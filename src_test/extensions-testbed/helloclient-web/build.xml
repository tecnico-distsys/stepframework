<?xml version="1.0" encoding="UTF-8"?>

<project name="helloclient-web" default="build" basedir=".">

    <description>Web Application build file. Customize as required.</description>


    <!-- load environment variables as properties -->
    <property environment="env"/>

    <property name="root.rel-dir" value="../../../src"/>
    <property name="rootextra.rel-dir" value="../../../src_extra"/>

    <!-- properties with default folder locations -->
    <property name="src.rel-dir" value="src"/>
    <property name="web-content.rel-dir" value="web"/>
    <property name="build.rel-dir" value="build"/>
    <property name="dist.rel-dir" value="dist"/>

    <!-- load properties files -->
    <property file="${root.rel-dir}/build.properties"/>
    <property file="${user.home}/build.properties"/>

    <!-- import external definitions -->
    <import file="${root.rel-dir}/lib/tomcat.xml" />
    <import file="${root.rel-dir}/lib/jax.xml" />


    <!-- project classpath -->

    <path id="project.classpath">
        <!-- compiled classes -->
        <pathelement location="${build.rel-dir}" />

        <!-- project libraries -->
        <fileset dir="${web-content.rel-dir}/WEB-INF">
            <include name="lib/**/*.jar" />
        </fileset>

        <!-- root libraries -->
        <fileset dir="${root.rel-dir}/lib">
            <include name="*.jar" />
        </fileset>

        <!-- hello libraries -->
        <fileset dir="../hello-ws/dist">
            <include name="*.jar" />
        </fileset>
        <fileset dir="../hello-wsclient/dist">
            <include name="*.jar" />
        </fileset>

        <!-- STEP libraries -->
        <fileset dir="${env.STEP_HOME}/lib">
            <include name="*.jar" />
        </fileset>

        <!-- extension libraries -->
        <fileset dir="${root.rel-dir}/extensions/dist">
            <include name="*.jar" />
        </fileset>
        <fileset dir="${rootextra.rel-dir}/more-extensions/dist">
            <include name="*.jar" />
        </fileset>
    </path>


    <!-- basic -->

    <target name="init">
        <mkdir dir="${build.rel-dir}"/>
        <mkdir dir="${dist.rel-dir}"/>
    </target>

    <target name="clean"
        description="Delete temporary folders">
        <delete dir="${build.rel-dir}" failonerror="false" deleteonexit="true" />
        <delete dir="${dist.rel-dir}" failonerror="false" deleteonexit="true" />
    </target>


    <!-- compile -->

    <target name="prepare-resources" depends="init">
    <!-- description="Prepare application resource files" -->
        <copy todir="${build.rel-dir}" overwrite="true">
            <fileset dir="${src.rel-dir}" includes="**/*.properties,**/*.xml" excludes="" />
        </copy>
        <replace dir="${build.rel-dir}" includes="**/*.properties,**/*.xml" excludes="" summary="true">
            <replacefilter token="@example-token@" value="${example-property}" />
        </replace>
    </target>

    <target name="compile" depends="prepare-resources">
    <!-- description="Compile source code" -->
        <javac
            srcdir="${src.rel-dir}"
            destdir="${build.rel-dir}"
            debug="true"
            debuglevel="lines,vars,source"
            optimize="true"
            deprecation="true"
            verbose="false"
        >
            <compilerarg line="" /> <!-- "-Xlint:all", "-Xlint:all,-path", "-Xlint:all,-path,-unchecked" -->
            <classpath refid="project.classpath" />
        </javac>
    </target>


    <!-- web application -->

    <property name="deploy.context" value="${ant.project.name}" />
    <property name="deploy.war.rel-file" value="${dist.rel-dir}/${ant.project.name}.war" />

    <target name="create-war" depends="compile">
    <!-- description="Create Web application ARchive" -->

        <!-- unjar *-ws-cli.jar to build folder because of a Java or JAX-WS or Tomcat bug
            that locks the file on the server and prevents undeploy from working as expected -->
        <unjar
            src="../hello-wsclient/dist/hello-wsclient.jar"
            dest="${build.rel-dir}"
            overwrite="true" />

        <jar destfile="${deploy.war.rel-file}">
            <!-- web content -->
            <zipfileset dir="${web-content.rel-dir}"
                        includes="**/*" />
            <!-- compiled classes and resource files -->
            <zipfileset dir="${build.rel-dir}"
                        includes="**/*.class,**/*.properties,**/*.xml"
                        prefix="WEB-INF/classes" />
            <!-- root libs -->
            <zipfileset dir="${root.rel-dir}/lib"
                        includes="*.jar"
                        prefix="WEB-INF/lib" />
            <!-- hello libraries -->
            <zipfileset dir="../hello-ws/dist"
                        includes="*.jar"
                        prefix="WEB-INF/lib" />
            <!-- extension libs -->
            <zipfileset dir="${root.rel-dir}/extensions/dist"
                        includes="*.jar"
                        prefix="WEB-INF/lib" />
            <zipfileset dir="${rootextra.rel-dir}/more-extensions/dist"
                        includes="*.jar"
                        prefix="WEB-INF/lib" />
        </jar>

    </target>

    <!-- console -->

    <property name="run.main-class" value="hello.web.SayHelloAction"/>
    <property name="run.args" value="friend"/>

    <target name="execute">
    <!-- description="Execute the program as-is - no compilation is performed" -->
        <java classname="${run.main-class}" fork="true">
            <arg line="${run.args}" />
            <classpath>
               <path refid="project.classpath" />
            </classpath>
            <sysproperty key="com.sun.xml.ws.transport.http.client.HttpTransportPipe.dump" value="false" />
        </java>
    </target>

    <!-- run target is not defined because the console is for testing only -->


    <!-- build -->

    <target name="build" depends="create-war"
        description="Build the program">
    </target>

    <target name="rebuild" depends="clean,build" >
    <!-- description="Rebuild the project" -->
    </target>


</project>
