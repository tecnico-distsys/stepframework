<?xml version="1.0" encoding="UTF-8"?>

<project name="stepframework" default="build" basedir=".">

    <description>Library build file. Customize as required.</description>


    <!-- load environment variables as properties -->
    <property environment="env"/>

    <!-- load properties files -->
    <property file="build.properties"/>
    <property file="../build.properties"/>
    <property file="${user.home}/build.properties"/>

    <!-- properties with default folder locations -->
    <property name="src.rel-dir" value="src"/>
    <property name="tests.src.rel-dir" value="tests"/>
    <property name="web-content.rel-dir" value="WebContent"/>
    <property name="build.rel-dir" value="bin"/>
    <property name="dist.rel-dir" value="dist"/>
    <property name="doc.rel-dir" value="${dist.rel-dir}/javadoc" />


    <!-- project classpath -->

    <path id="project.classpath">
        <!-- compiled classes -->
        <pathelement location="${build.rel-dir}" />
        <!-- shared libraries -->
        <fileset dir="../lib">
            <include name="*.jar" />
        </fileset>
        <!-- referenced libraries -->
        <fileset dir="${env.STEP_HOME}/lib">
            <include name="*.jar" />
        </fileset>
    </path>


    <!-- basic -->

    <target name="init">
        <mkdir dir="${build.rel-dir}"/>
        <mkdir dir="${dist.rel-dir}"/>
    </target>

    <target name="clean"
        description="Delete temporary folders">
        <delete dir="${build.rel-dir}" failonerror="false" deleteonexit="true" />
        <delete dir="${dist.rel-dir}" failonerror="false" deleteonexit="true" />
    </target>


    <!-- compile -->

    <target name="prepare-resources" depends="init">
    <!-- description="Prepare application resource files" -->
        <copy todir="${build.rel-dir}" overwrite="true">
            <fileset dir="${src.rel-dir}" includes="**/*.properties,**/*.xml" excludes="" />
        </copy>
        <replace dir="${build.rel-dir}" includes="**/*.properties,**/*.xml" excludes="" summary="true">
            <replacefilter token="@example-token@" value="${example-property}" />
        </replace>
    </target>

    <target name="compile" depends="prepare-resources">
    <!-- description="Compile source code" -->
        <javac
            srcdir="${src.rel-dir}"
            destdir="${build.rel-dir}"
            debug="true"
            debuglevel="lines,vars,source"
            optimize="true"
            deprecation="true"
            verbose="false"
        >
            <compilerarg line="" /> <!-- "-Xlint:all", "-Xlint:all,-path", "-Xlint:all,-path,-unchecked" -->
            <classpath refid="project.classpath" />
        </javac>
    </target>

	
    <!-- tests -->

    <target name="prepare-test-resources" depends="init">
    <!-- description="Prepare application resource files" -->
        <copy todir="${build.rel-dir}" overwrite="true">
            <fileset dir="${tests.src.rel-dir}" includes="**/*.properties,**/*.xml" excludes="" />
        </copy>
        <replace dir="${build.rel-dir}" includes="**/*.properties,**/*.xml" excludes="" summary="true">
            <replacefilter token="@example-token@" value="${example-property}" />
        </replace>
    </target>

    <target name="compile-tests" depends="prepare-test-resources">
    <!-- description="Compile tests" -->
        <javac
            srcdir="${tests.src.rel-dir}" 
            destdir="${build.rel-dir}"
            debug="${compile.debug}"
            debuglevel="${compile.debuglevel}"
        >
            <classpath refid="project.classpath" />
        </javac>
    </target>

    <target name="run-tests" depends="compile-tests"
        description="Run tests">
        <junit haltonfailure="yes" fork="true">
            <classpath refid="project.classpath" />
            <formatter type="plain" usefile="false" />
            <batchtest>
                <fileset dir="${tests.src.rel-dir}"
                    includes="**/*Test.java">
                </fileset>
            </batchtest>
        </junit>
    </target>


    <!-- library -->

    <property name="jar.rel-file" value="${dist.rel-dir}/${ant.project.name}.jar" />

    <target name="create-jar" depends="compile">
    <!-- description="Create a jar file" -->

        <jar destfile="${jar.rel-file}">
            <!-- compiled classes and resources -->
            <zipfileset dir="${build.rel-dir}"
                        includes="**/*.class"
                        excludes="**/*.properties,**/*.xml" />
        </jar>
    </target>


    <!-- javadoc -->

    <target name="javadoc" depends="init"
        description="Generate Java classes documentation" >
        <echo message="Generating javadocs to directory ${doc.rel-dir}" />
        <delete dir="${doc.rel-dir}" />
        <javadoc destdir="${doc.rel-dir}" sourcepath="">
            <fileset dir="${src.rel-dir}" includes="**/*.java"/>
            <classpath refid="project.classpath" />
        </javadoc>
    </target>


    <!-- build -->

    <target name="build" depends="compile,run-tests,create-jar"
        description="Build the program">
    </target>

    <target name="rebuild" depends="clean,build">
    <!-- description="Rebuild the project" -->
    </target>

    <target name="dist-to-lib" depends="clean,create-jar"> <!-- exclude test code -->
    <!-- description="Rebuild the program and distribute it to lib folder" -->
        <copy todir="../lib" overwrite="true">
            <fileset file="${jar.rel-file}"/>
        </copy>
    </target>


</project>
